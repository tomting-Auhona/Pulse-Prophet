# -*- coding: utf-8 -*-
"""Untitled69.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ReXQBGIlL7s9nQlogqZswNo00wyqA6ni
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import pickle
# Accuracy on train and test dataset - 100%
# Load the dataset
train_data = pd.read_csv("42 diseases Training dataset.csv").dropna(axis=1)

# Encoding the target value into numerical value
encoder = LabelEncoder()
train_data["prognosis"] = encoder.fit_transform(train_data["prognosis"])

# Prepare the training data
X = train_data.iloc[:, :-1]
y = train_data.iloc[:, -1]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)

# Training the Logistic Regression Classifier
lg_model = LogisticRegression(max_iter=1000, random_state=42)
lg_model.fit(X_train, y_train)

# Save the trained model and encoder using pickle
with open("lg_model.pkl", "wb") as f:
    pickle.dump(lg_model, f)

with open("encoder.pkl", "wb") as f:
    pickle.dump(encoder, f)

# Load the saved model and encoder using pickle
with open("lg_model.pkl", "rb") as f:
    lg_model = pickle.load(f)

with open("encoder.pkl", "rb") as f:
    encoder = pickle.load(f)

def preprocess_input(input_data):
    # Preprocessing steps
    return input_data

# Function to make disease predictions using the Logistic Regression model
def predict_disease(input_data, encoder, lg_model):
    # Preprocess the input data
    input_data = preprocess_input(input_data)

    # Make predictions using the loaded Logistic Regression model
    lg_prediction = lg_model.predict(input_data)

    # Convert the numerical prediction to disease name using the label encoder
    disease_name = encoder.inverse_transform([lg_prediction])[0]

    return disease_name

# Example usage
input_data = pd.DataFrame([[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]])  # Replace with your input data
prediction = predict_disease(input_data, encoder, lg_model)
print("Predicted Disease:", prediction)